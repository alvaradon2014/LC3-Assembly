;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;; CONNECT FOUR ;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;; SELECT A ROW between 1-6 ;;;;;;;;;;;;;;;;;
; Each player takes turns dropping a checker into a column ;
;;;;;;; A player cannot remove checkers from a column ;;;;;;
;;;;; player cannot insert a checker into a full column ;;;;
;; The game ends when a player places 4 checkers in a row ;;
;;;;;; either vertically, horizontally, or diagonally ;;;;;;
;; A tie occurs if every location on the grid is occupied ;;
;;;;;;; but no player has four consecutive checkers ;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.ORIG X3000
JSR BOARD_PTR
;;;HORIZONTAL CHECK
HORIZ 	ADD R1, R0, #0		; COPY CHIP VALUE TO R1
	NOT R0, R0		; NEGATED CHIP VALUE
	ADD R0, R0, #1		; 2'S COMP OF CHIP;;;;;;;;;;;;
	ADD R3, R2, #0		; ADDRESS OF SPACE TO R3
	AND R4, R4, #0
	ADD R4, R4, X-A		; NEGATED <ENTER>
RIGHT1	ADD R3, R3, #1		; EMPTY SPACE NEXT TO INPUTTED SPOT
	LDR R5, R3, #0		; DATA AT EMPTY SPACE
	ADD R5, R5, R4		; COMPARE DATA FROM SPACE, SEES IF IT'S A LF
	BRZ LEFT1		; IF ZERO, IT'S A LF! END O' THE ROW, CHECK OTHER SIDE
	ADD R3, R3, #1		; NEXT PLAYABLE SPACE
	LDR R5, R3, #0		; DATA FROM PLAYABLE SPACE
	ADD R5, R5, R0		; DATA MINUS CHIP
	BRNP LEFT1		; NOT SAME, CHECK OTHER SIDE
RIGHT2	ADD R3, R3, #1		; EMPTY SPACE NEXT TO INPUTTED SPOT
	LDR R5, R3, #0		; DATA AT EMPTY SPACE
	ADD R5, R5, R4		; COMPARE DATA FROM SPACE, SEES IF IT'S A LF
	BRZ LEFT2		; IF ZERO, IT'S A LF! END O' THE ROW, CHECK OTHER SIDE
	ADD R3, R3, #1		; NEXT PLAYABLE SPACE
	LDR R5, R3, #0		; DATA FROM PLAYABLE SPACE
	ADD R5, R5, R0		; DATA MINUS CHIP
	BRNP LEFT2		; NOT SAME, CHECK OTHER SIDE
RIGHT3	ADD R3, R3, #1		; EMPTY SPACE NEXT TO INPUTTED SPOT
	LDR R5, R3, #0		; DATA AT EMPTY SPACE
	ADD R5, R5, R4		; COMPARE DATA FROM SPACE, SEES IF IT'S A LF
	BRZ LEFT3		; IF ZERO, IT'S A LF! END O' THE ROW, CHECK OTHER SIDE
	ADD R3, R3, #1		; NEXT PLAYABLE SPACE
	LDR R5, R3, #0		; DATA FROM PLAYABLE SPACE
	ADD R5, R5, R0		; DATA MINUS CHIP
	BRNP LEFT3		; NOT SAME, CHECK OTHER SIDE
	JSR GET_WIN1

LEFT1	ADD R3, R2, #0		; COPY CHIP LOC TO R3 AGAIN
	ADD R3, R3, #-1		; ADDRESS OF SPACE NEXT TO CHIP	
	LDR R5, R3, #0		; DATA FROM "SPACE"
	ADD R5, R5, R4		; DATA MINUS LF
	BRZ VERT		; IF ZERO, END OF ROW, NOT SAME CHECK VERTICAL
	ADD R3, R3, #-1		; NEXT 'PLAYABLE' SPACE
	LDR R5, R3, #0		; CONTENTS IN SPACE
	ADD R5, R5, R0		; DATA MINUS CHIP
	BRNP VERT		; NOT SAME, CHECK VERTICAL
	BRZ #1			; SKIP RESET OF R3
LEFT2	ADD R3, R2, #0		; COPY CHIP LOCATION TO R3
	ADD R3, R3, #-1		; ADDRESS OF 'SPACE' NEXT TO SPACE
	LDR R5, R3, #0		; GET STUFF
	ADD R5, R5, R4		; IS STUFF A LF?
	BRZ VERT		; IF LF, END OF ROW, GET OUTTA HERE
	ADD R3, R3, #-1		; NEXT 'PLAYABLE' SPACE
	LDR R5, R3, #0		; CONTENTS IN SPACE
	ADD R5, R5, R0		; DATA MINUS CHIP
	BRNP VERT		; NOT SAME, CHECK SOMETHIN' ELSE
	BRZ #1			; SKIP RESET OF R3
LEFT3	ADD R3, R2, #0		; CHIP LOC TO R3
	ADD R3, R3, #-1		; ADDRESS OF 'SPACE' NEXT TO SPACE
	LDR R5, R3, #0		; CONTENTS IN BLANK SPACE
	ADD R5, R5, R4		; LINE FILL?
	BRZ VERT		; END OF ROW, CHECK VERTICAL FO' FOUR IN A ROW
	ADD R3, R3, #-1		; NEXT 'PLAYABLE' SPACE
	LDR R5, R3, #0		; STUFF IN DAT SPACE
	ADD R5, R5, R0		; DATA MINUS CHIP
	BRNP VERT		; NOT SAME SUCKAH, GO TO VERT
	JSR GET_WIN1
;;;VERTICAL CHECK
VERT	JSR GET_UPBD
	ADD R3, R2, #0		; COPY CHIP LOC TO R3
	;LD R1, UPBD		; UPPER BORDER OF BOARD IN R1
UP1	ADD R3, R3, #-12	; LOC OF SPACE ABOVE CHIP
	ADD R5, R3, R1		; SPACE - BORDER, IS SPACE IN BOARD
	BRN DOWN1		; INVALID CHECK OTHER SIDE, IF VALID KEEP GOING YO
	LDR R5, R3, #0		; CONTENTS IN SPACE
	ADD R5, R5, R0		; CHIP IN SPACE?
	BRNP DOWN1		; NOT SAME, CHECK OTHER SIDE
UP2	ADD R3, R3, #-12	; LOC OF SPACE ABOVE SPACE ABOVE CHIP
	ADD R5, R3, R1		; SPACE MINUS BORDER, IS SPACE IN BOARD?
	BRN DOWN2		; INVALID, OTHER SIDE
	LDR R5, R3, #0		; CONTENTS IN SPACE
	ADD R5, R5, R0		; IS THAT A CHIP IN THERE?
	BRNP DOWN2		; NO? OH... CHECK OTHER SIDE
UP3	ADD R3, R3, #-12	; LOC OF SPACE ABOVE SPACE ABOVE SPACE ABOVE CHIP
	ADD R5, R3, R1		; SPACE - BORDER, IS SPACE IN BOARD?
	BRN DOWN3		; INVALID MAN, CHECK OTHER SIDE OF CHIP
	LDR R5, R3, #0		; CONTENTS IN SPACE
	ADD R5, R5, R0		; CHIP IN SPACE?
	BRNP DOWN3		; INVALID, CHECK OTHAH SIDE
	JSR GET_WIN1

DOWN1	JSR GET_LWBD
	ADD R3, R2, #0		; COPY CHIP LOC TO R3
	;LD R1, LWBD		; LOWER BORDER OF BOARD IN R1
	ADD R3, R3, #12		; LOC BELOW CHIP
	ADD R5, R3, R1		; SPACE MINUS BORDER, SPACE IN BOARD?
	BRP DIAG		; OUT OF BOUNDS, CHECK ELSEWHERE
	LDR R5, R3, #0		; IF -IN- BOARD GET STUFF IN SPACE
	ADD R5, R5, R0		; CHIP? YA THERE BROSKI?
	BRNP DIAG		; NOT SAME, NEXT CHECK
	BRZ #2			; SKIP RESET
DOWN2	ADD R3, R2, #0		; COPY CHIP LOC TO R3
	JSR GET_LWBD
	;LD R1, LWBD		; LOWER BORDER OF BOARD IN R1
	ADD R3, R3, #12		; SPACE BENEATH SPACE (EITHER OF CHIP OR OTHER SPACE)
	ADD R5, R3, R1		; SPACE IN BOARD?
	BRP DIAG		; OUTTA BOUNDS, CHECK OTHER CHECK
	LDR R5, R3, #0		; IN BOARD? GET DEM CONTENTS
	ADD R5, R5, R0		; CHIP?
	BRNP DIAG		; NOT THERE ;-; NEXT CHECK
	BRZ #2			; SKIP RESET
DOWN3	ADD R3, R2, #0		; CHIP LOC TO R3
	JSR GET_LWBD
	;LD R1, LWBD		; LOWER BORDER OF BOARD IN R1
	ADD R3, R3, #12		; SPACE BELOW SPACE
	ADD R5, R3, R1		; IN BOARD?
	BRP DIAG		; NOPE, OTHER CHECK YO
	LDR R5, R3, #0		; STUFF IN THE SPACE
	ADD R5, R5, R0		; CHIP PLEEEASE?
	BRNP DIAG		; FINE, GO TO OTHER CHECK
	JSR GET_WIN1
;;;DIAGONAL CHECK
DIAG		ADD R3, R2, #0	; CHIP LOC IN R3
		JSR GET_LWBD
		;LD R1, LWBD	; BOTTOM EDGE OF BOARD
DRIGHTDOWN1	ADD R3, R3, #1	; ONE RIGHT, THE EMPTY AREA NEXT TO CHIP
		LDR R5, R3, #0	; CONTENTS FROM SPACE
		ADD R5, R5, R4	; SUBTRACT CONTENTS WITH A LF
		BRZ DLEFTDOWN1	; END OF ROW, CHECK OTHER SIDE
		ADD R3, R3, #1	; ONE RIGHT, THE SPACE THAT MIGHT HAVE A CHIP
		ADD R3, R3, #12	; ONE DOWN, DIAGONAL SPACE, YAAAY
		LDR R5, R3, #0	; CONTENTS IN DA SPACE
		ADD R5, R5, R0	; CHIP? YA THERE PAL?
		BRNP DRIGHTUP1	; NOT SAME, CHECK SAME SIDE OTHER ANGLE
DRIGHTDOWN2	ADD R3, R3, #1	; ONE RIGHT, EMPTY SPAAACE
		LDR R5, R3, #0	; CONTENTS IN DAT SPACE
		ADD R5, R5, R4	; SUBTRACTS STUFF WITH LF
		BRZ DLEFTDOWN1	; END OF ROW, CHECK OTHER SIDE
		ADD R3, R3, #1	; ONE RIGHT, SPACE WITH CHIP MAYBE
		ADD R3, R3, #12	; ONE DOWN DIAGONAL SPACE!
		LDR R5, R3, #0	; STUFF IN SPACE
		ADD R5, R5, R0	; HEY CHIP... HELLO?
		BRNP DRIGHTUP1	; NOT SAME ;-; GO THE OTHER WAY
DRIGHTDOWN3	ADD R3, R3, #1	; ONE RIGHT, EMPTY SPACE
		LDR R5, R3, #0	; CONTENTS IN SPACE
		ADD R5, R5, R4	; CONTENTS MINUS LF
		BRZ DLEFTDOWN1	; END OF ROW, OTHER SIDE BUB
		ADD R3, R3, #1	; ONE RIGHT, THE PLAYABLE SPACE
		ADD R3, R3, #12	; ONE DOWN, DIAGONAL SPACE
		LDR R5, R3, #0	; CONTENTS IN DIAGONAL SPACE
		ADD R5, R5, R0	; IS CHIP IN SPACE?
		BRNP DRIGHTUP1	; NOT SAME GO OTHER WAY
		JSR GET_WIN1

DRIGHTUP1	ADD R3, R2, #0	; RESET R3 WITH CHIP DATA
		JSR GET_UPBD
		;LD R1, UPBD	; BORDER OF TOP OF BOARD
		ADD R3, R3, #2	; NEXT PLAYABLE SPACE, ALREADY CHECKED FO' LF
		ADD R3, R3, #-12 ;ONE UP, DIAGONAL SPACE FROM CHIP
		LDR R5, R3, #0	; CONTENTS FROM SPACE
		ADD R5, R5, R0	; CHIP?
		BRNP DLEFTDOWN1	; NOT SAME GO TO OTHER SIDE
DRIGHTUP2	ADD R3, R3, #1	; EMPTY SPACE NEXT TO SPACE
		LDR R5, R3, #0	; CONTENTS IN SPACE
		ADD R5, R5, R4	; CONTENTS MINUS LF
		BRZ DLEFTDOWN1	; END OF ROW, OTHER SIDE
		ADD R3, R3, #1	; ONE RIGHT, PLAYABLE SPACE
		ADD R3, R3, #-12; ONE UP, DIAGONAL SPOT
		LDR R5, R3, #0	; CONTENTS IN DIAGONAL SPACE
		ADD R5, R5, R0	; CHIP?
		BRNP DLEFTDOWN1	; NOT SAME, OTHER SIDE
DRIGHTUP3	ADD R3, R3, #1	; EMPTY SPACE NECT TO SPACE
		LDR R5, R3, #0	; CONTENTS IN SPACE
		ADD R5, R5, R4	; CONTENTS MINUS LF
		BRZ DLEFTDOWN1	; END OF ROW, CHECK OTHER SIDE
		ADD R3, R3, #1	; RIGHT ONE, NEXT COLUMN
		ADD R3, R3, #-12; ONE UP, DIAGONAL SPACE YO
		LDR R5, R3, #0	; CONTENTS IN DIAGONAL SPACE
		ADD R5, R5, R0	; CHIP?
		BRNP DLEFTDOWN1	; NOT SAME, CHECK OTHER SIDE HOMIE
		JSR GET_WIN1
		
DLEFTDOWN1	ADD R3, R2, #0	; CHIP LOC IN R3
		JSR GET_LWBD
		;LD R1, LWBD	; BOTTOM EDGE OF BOARD
		ADD R3, R3, #-1	; ONE LEFT, THE EMPTY AREA NEXT TO CHIP
		LDR R5, R3, #0	; CONTENTS FROM SPACE
		ADD R5, R5, R4	; SUBTRACT CONTENTS WITH A LF
		BRZ DLEFTUP1	; END OF ROW, CHECK OTHER SIDE
		ADD R3, R3, #-1	; ONE LEFT, THE SPACE THAT MIGHT HAVE A CHIP
		ADD R3, R3, #12	; ONE DOWN, DIAGONAL SPACE, YAAAY
		LDR R5, R3, #0	; CONTENTS IN DA SPACE
		ADD R5, R5, R0	; CHIP? YA THERE PAL?
		BRNP DLEFTUP1	; NOT SAME, CHECK SAME SIDE OTHER ANGLE
DLEFTDOWN2	ADD R3, R3, #-1	; ONE LEFT, EMPTY SPAAACE
		LDR R5, R3, #0	; CONTENTS IN DAT SPACE
		ADD R5, R5, R4	; SUBTRACTS STUFF WITH LF
		BRZ DLEFTUP1	; END OF ROW, CHECK OTHER SIDE
		ADD R3, R3, #-1	; ONE LEFT, SPACE WITH CHIP MAYBE
		ADD R3, R3, #12	; ONE DOWN DIAGONAL SPACE!
		LDR R5, R3, #0	; STUFF IN SPACE
		ADD R5, R5, R0	; HEY CHIP... HELLO?
		BRNP DLEFTUP1	; NOT SAME ;-; GO THE OTHER WAY
DLEFTDOWN3	ADD R3, R3, #-1	; ONE LEFT, EMPTY SPACE
		LDR R5, R3, #0	; CONTENTS IN SPACE
		ADD R5, R5, R4	; CONTENTS MINUS LF
		BRZ DLEFTUP1	; END OF ROW, OTHER SIDE BUB
		ADD R3, R3, #-1	; ONE LEFT, THE PLAYABLE SPACE
		ADD R3, R3, #12	; ONE DOWN, DIAGONAL SPACE
		LDR R5, R3, #0	; CONTENTS IN DIAGONAL SPACE
		ADD R5, R5, R0	; IS CHIP IN SPACE?
		BRNP DLEFTUP1	; NOT SAME GO OTHER WAY
		JSR GET_WIN1

DLEFTUP1	ADD R3, R2, #0	; RESET R3 WITH CHIP DATA
		JSR GET_UPBD
		;LD R1, UPBD	; BORDER OF TOP OF BOARD
		ADD R3, R3, #-2	; NEXT PLAYABLE SPACE, ALREADY CHECKED FO' LF
		ADD R3, R3, #-12 ;ONE UP, DIAGONAL SPACE FROM CHIP
		LDR R5, R3, #0	; CONTENTS FROM SPACE
		ADD R5, R5, R0	; CHIP?
		BRNP DRAW_MAYBE1	; NOT SAME END TURN
DLEFTUP2	ADD R3, R3, #-1	; EMPTY SPACE NEXT TO SPACE
		LDR R5, R3, #0	; CONTENTS IN SPACE
		ADD R5, R5, R4	; CONTENTS MINUS LF
		BRNP DRAW_MAYBE1	; END OF ROW, NO MORE CHECKS
		ADD R3, R3, #-1	; ONE LEFT, PLAYABLE SPACE
		ADD R3, R3, #-12; ONE UP, DIAGONAL SPOT
		LDR R5, R3, #0	; CONTENTS IN DIAGONAL SPACE
		ADD R5, R5, R0	; CHIP?
		BRNP DRAW_MAYBE1
			; NOT SAME, END TURN
DLEFTUP3	ADD R3, R3, #-1	; EMPTY SPACE NECT TO SPACE
		LDR R5, R3, #0	; CONTENTS IN SPACE
		ADD R5, R5, R4	; CONTENTS MINUS LF
		BRNP DRAW_MAYBE1
				; END OF ROW, NO MO' CHECKS HOMIE
		ADD R3, R3, #-1	; LEFT ONE, NEXT COLUMN
		ADD R3, R3, #-12; ONE UP, DIAGONAL SPACE YO
		LDR R5, R3, #0	; CONTENTS IN DIAGONAL SPACE
		ADD R5, R5, R0	; CHIP?
		BRNP DRAW_MAYBE1	; NOT SAME, NO CHECKS LEFT
		JSR GET_WIN1
DRAW_MAYBE1	JSR GET_DM
;;;HORIZONTAL CHECK FO' PL2
HORIZ2 ADD R1, R0, #0		; COPY CHIP VALUE TO R1
	NOT R0, R0		; NEGATED CHIP VALUE
	ADD R0, R0, #1		; 2'S COMP OF CHIP
	ADD R3, R2, #0		; ADDRESS OF SPACE TO R3
	AND R4, R4, #0
	ADD R4, R4, X-A		; NEGATED <ENTER>
RGHT1	ADD R3, R3, #1		; EMPTY SPACE NEXT TO INPUTTED SPOT
	LDR R5, R3, #0		; DATA AT EMPTY SPACE
	ADD R5, R5, R4		; COMPARE DATA FROM SPACE, SEES IF IT'S A LF
	BRZ LFT1		; IF ZERO, IT'S A LF! END O' THE ROW, CHECK OTHER SIDE
	ADD R3, R3, #1		; NEXT PLAYABLE SPACE
	LDR R5, R3, #0		; DATA FROM PLAYABLE SPACE
	ADD R5, R5, R0		; DATA MINUS CHIP
	BRNP LFT1		; NOT SAME, CHECK OTHER SIDE
RGHT2	ADD R3, R3, #1		; EMPTY SPACE NEXT TO INPUTTED SPOT
	LDR R5, R3, #0		; DATA AT EMPTY SPACE
	ADD R5, R5, R4		; COMPARE DATA FROM SPACE, SEES IF IT'S A LF
	BRZ LFT2		; IF ZERO, IT'S A LF! END O' THE ROW, CHECK OTHER SIDE
	ADD R3, R3, #1		; NEXT PLAYABLE SPACE
	LDR R5, R3, #0		; DATA FROM PLAYABLE SPACE
	ADD R5, R5, R0		; DATA MINUS CHIP
	BRNP LFT2		; NOT SAME, CHECK OTHER SIDE
RGHT3	ADD R3, R3, #1		; EMPTY SPACE NEXT TO INPUTTED SPOT
	LDR R5, R3, #0		; DATA AT EMPTY SPACE
	ADD R5, R5, R4		; COMPARE DATA FROM SPACE, SEES IF IT'S A LF
	BRZ LFT3		; IF ZERO, IT'S A LF! END O' THE ROW, CHECK OTHER SIDE
	ADD R3, R3, #1		; NEXT PLAYABLE SPACE
	LDR R5, R3, #0		; DATA FROM PLAYABLE SPACE
	ADD R5, R5, R0		; DATA MINUS CHIP
	BRNP LFT3		; NOT SAME, CHECK OTHER SIDE
	JSR GET_WIN2

LFT1	ADD R3, R2, #0		; COPY CHIP LOC TO R3 AGAIN
	ADD R3, R3, #-1		; ADDRESS OF SPACE NEXT TO CHIP	
	LDR R5, R3, #0		; DATA FROM "SPACE"
	ADD R5, R5, R4		; DATA MINUS LF
	BRZ VRT			; IF ZERO, END OF ROW, NOT SAME CHECK VERTICAL
	ADD R3, R3, #-1		; NEXT 'PLAYABLE' SPACE
	LDR R5, R3, #0		; CONTENTS IN SPACE
	ADD R5, R5, R0		; DATA MINUS CHIP
	BRNP VRT		; NOT SAME, CHECK VERTICAL
	BRZ #1			; SKIP RESET OF R3
LFT2	ADD R3, R2, #0		; COPY CHIP LOCATION TO R3
	ADD R3, R3, #-1		; ADDRESS OF 'SPACE' NEXT TO SPACE
	LDR R5, R3, #0		; GET STUFF
	ADD R5, R5, R4		; IS STUFF A LF?
	BRZ VRT			; IF LF, END OF ROW, GET OUTTA HERE
	ADD R3, R3, #-1		; NEXT 'PLAYABLE' SPACE
	LDR R5, R3, #0		; CONTENTS IN SPACE
	ADD R5, R5, R0		; DATA MINUS CHIP
	BRNP VRT		; NOT SAME, CHECK SOMETHIN' ELSE
	BRZ #1			; SKIP RESET OF R3
LFT3	ADD R3, R2, #0		; CHIP LOC TO R3
	ADD R3, R3, #-1		; ADDRESS OF 'SPACE' NEXT TO SPACE
	LDR R5, R3, #0		; CONTENTS IN BLANK SPACE
	ADD R5, R5, R4		; LINE FILL?
	BRZ VRT			; END OF ROW, CHECK VERTICAL FO' FOUR IN A ROW
	ADD R3, R3, #-1		; NEXT 'PLAYABLE' SPACE
	LDR R5, R3, #0		; STUFF IN DAT SPACE
	ADD R5, R5, R0		; DATA MINUS CHIP
	BRNP VRT		; NOT SAME SUCKAH, GO TO VERT
	JSR GET_WIN2
;;;VERTICAL CHECK PL2
VRT	JSR GET_UPBD	
	ADD R3, R2, #0		; COPY CHIP LOC TO R3
	;LD R1, UPBD		; UPPER BORDER OF BOARD IN R1
UP_1	ADD R3, R3, #-12	; LOC OF SPACE ABOVE CHIP
	ADD R5, R3, R1		; SPACE - BORDER, IS SPACE IN BOARD
	BRN DOWN_1		; INVALID CHECK OTHER SIDE, IF VALID KEEP GOING YO
	LDR R5, R3, #0		; CONTENTS IN SPACE
	ADD R5, R5, R0		; CHIP IN SPACE?
	BRNP DOWN_1		; NOT SAME, CHECK OTHER SIDE
UP_2	ADD R3, R3, #-12	; LOC OF SPACE ABOVE SPACE ABOVE CHIP
	ADD R5, R3, R1		; SPACE MINUS BORDER, IS SPACE IN BOARD?
	BRN DOWN_2		; INVALID, OTHER SIDE
	LDR R5, R3, #0		; CONTENTS IN SPACE
	ADD R5, R5, R0		; IS THAT A CHIP IN THERE?
	BRNP DOWN_2		; NO? OH... CHECK OTHER SIDE
UP_3	ADD R3, R3, #-12	; LOC OF SPACE ABOVE SPACE ABOVE SPACE ABOVE CHIP
	ADD R5, R3, R1		; SPACE - BORDER, IS SPACE IN BOARD?
	BRN DOWN_3		; INVALID MAN, CHECK OTHER SIDE OF CHIP
	LDR R5, R3, #0		; CONTENTS IN SPACE
	ADD R5, R5, R0		; CHIP IN SPACE?
	BRNP DOWN_3		; INVALID, CHECK OTHAH SIDE
	JSR GET_WIN2

DOWN_1	JSR GET_LWBD
	ADD R3, R2, #0		; COPY CHIP LOC TO R3
	;LD R1, LWBD		; LOWER BORDER OF BOARD IN R1
	ADD R3, R3, #12		; LOC BELOW CHIP
	ADD R5, R3, R1		; SPACE MINUS BORDER, SPACE IN BOARD?
	BRP DIAG2		; OUT OF BOUNDS, CHECK ELSEWHERE
	LDR R5, R3, #0		; IF -IN- BOARD GET STUFF IN SPACE
	ADD R5, R5, R0		; CHIP? YA THERE BROSKI?
	BRNP DIAG2		; NOT SAME, NEXT CHECK
	BRZ #2			; SKIP RESET
DOWN_2	ADD R3, R2, #0		; COPY CHIP LOC TO R3
	JSR GET_LWBD
	;LD R1, LWBD		; LOWER BORDER OF BOARD IN R1
	ADD R3, R3, #12		; SPACE BENEATH SPACE (EITHER OF CHIP OR OTHER SPACE)
	ADD R5, R3, R1		; SPACE IN BOARD?
	BRP DIAG2		; OUTTA BOUNDS, CHECK OTHER CHECK
	LDR R5, R3, #0		; IN BOARD? GET DEM CONTENTS
	ADD R5, R5, R0		; CHIP?
	BRNP DIAG2		; NOT THERE ;-; NEXT CHECK
	BRZ #2			; SKIP RESET
DOWN_3	ADD R3, R2, #0		; CHIP LOC TO R3
	JSR GET_LWBD
	;LD R1, LWBD		; LOWER BORDER OF BOARD IN R1
	ADD R3, R3, #12		; SPACE BELOW SPACE
	ADD R5, R3, R1		; IN BOARD?
	BRP DIAG2		; NOPE, OTHER CHECK YO
	LDR R5, R3, #0		; STUFF IN THE SPACE
	ADD R5, R5, R0		; CHIP PLEEEASE?
	BRNP DIAG2		; FINE, GO TO OTHER CHECK
	BRZ WINNER2
;;;DIAGONAL CHECK FOR PLAYER DOS
DIAG2		ADD R3, R2, #0	; CHIP LOC IN R3
		JSR GET_LWBD
		;LD R1, LWBD	; BOTTOM EDGE OF BOARD
DRGHTDWN1	ADD R3, R3, #1	; ONE RIGHT, THE EMPTY AREA NEXT TO CHIP
		LDR R5, R3, #0	; CONTENTS FROM SPACE
		ADD R5, R5, R4	; SUBTRACT CONTENTS WITH A LF
		BRZ DLFTDWN1	; END OF ROW, CHECK OTHER SIDE
		ADD R3, R3, #1	; ONE RIGHT, THE SPACE THAT MIGHT HAVE A CHIP
		ADD R3, R3, #12	; ONE DOWN, DIAGONAL SPACE, YAAAY
		LDR R5, R3, #0	; CONTENTS IN DA SPACE
		ADD R5, R5, R0	; CHIP? YA THERE PAL?
		BRNP DRGHTUP1	; NOT SAME, CHECK SAME SIDE OTHER ANGLE
DRGHTDWN2	ADD R3, R3, #1	; ONE RIGHT, EMPTY SPAAACE
		LDR R5, R3, #0	; CONTENTS IN DAT SPACE
		ADD R5, R5, R4	; SUBTRACTS STUFF WITH LF
		BRZ DLFTDWN1	; END OF ROW, CHECK OTHER SIDE
		ADD R3, R3, #1	; ONE RIGHT, SPACE WITH CHIP MAYBE
		ADD R3, R3, #12	; ONE DOWN DIAGONAL SPACE!
		LDR R5, R3, #0	; STUFF IN SPACE
		ADD R5, R5, R0	; HEY CHIP... HELLO?
		BRNP DRGHTUP1	; NOT SAME ;-; GO THE OTHER WAY
DRGHTDWN3	ADD R3, R3, #1	; ONE RIGHT, EMPTY SPACE
		LDR R5, R3, #0	; CONTENTS IN SPACE
		ADD R5, R5, R4	; CONTENTS MINUS LF
		BRZ DLFTDWN1	; END OF ROW, OTHER SIDE BUB
		ADD R3, R3, #1	; ONE RIGHT, THE PLAYABLE SPACE
		ADD R3, R3, #12	; ONE DOWN, DIAGONAL SPACE
		LDR R5, R3, #0	; CONTENTS IN DIAGONAL SPACE
		ADD R5, R5, R0	; IS CHIP IN SPACE?
		BRNP DRGHTUP1	; NOT SAME GO OTHER WAY
		BRZ WINNER2

DRGHTUP1	ADD R3, R2, #0	; RESET R3 WITH CHIP DATA
		JSR GET_UPBD
		;LD R1, UPBD	; BORDER OF TOP OF BOARD
		ADD R3, R3, #2	; NEXT PLAYABLE SPACE, ALREADY CHECKED FO' LF
		ADD R3, R3, #-12 ;ONE UP, DIAGONAL SPACE FROM CHIP
		LDR R5, R3, #0	; CONTENTS FROM SPACE
		ADD R5, R5, R0	; CHIP?
		BRNP DLFTDWN1	; NOT SAME GO TO OTHER SIDE
DRGHTUP2	ADD R3, R3, #1	; EMPTY SPACE NEXT TO SPACE
		LDR R5, R3, #0	; CONTENTS IN SPACE
		ADD R5, R5, R4	; CONTENTS MINUS LF
		BRZ DLFTDWN1	; END OF ROW, OTHER SIDE
		ADD R3, R3, #1	; ONE RIGHT, PLAYABLE SPACE
		ADD R3, R3, #-12; ONE UP, DIAGONAL SPOT
		LDR R5, R3, #0	; CONTENTS IN DIAGONAL SPACE
		ADD R5, R5, R0	; CHIP?
		BRNP DLFTDWN1	; NOT SAME, OTHER SIDE
DRGHTUP3	ADD R3, R3, #1	; EMPTY SPACE NECT TO SPACE
		LDR R5, R3, #0	; CONTENTS IN SPACE
		ADD R5, R5, R4	; CONTENTS MINUS LF
		BRZ DLFTDWN1	; END OF ROW, CHECK OTHER SIDE
		ADD R3, R3, #1	; RIGHT ONE, NEXT COLUMN
		ADD R3, R3, #-12; ONE UP, DIAGONAL SPACE YO
		LDR R5, R3, #0	; CONTENTS IN DIAGONAL SPACE
		ADD R5, R5, R0	; CHIP?
		BRNP DLFTDWN1	; NOT SAME, CHECK OTHER SIDE HOMIE
		BRZ WINNER2
		
DLFTDWN1	ADD R3, R2, #0	; CHIP LOC IN R3
		JSR GET_LWBD
		;LD R1, LWBD	; BOTTOM EDGE OF BOARD
		ADD R3, R3, #-1	; ONE LEFT, THE EMPTY AREA NEXT TO CHIP
		LDR R5, R3, #0	; CONTENTS FROM SPACE
		ADD R5, R5, R4	; SUBTRACT CONTENTS WITH A LF
		BRZ DLFTUP1	; END OF ROW, CHECK OTHER SIDE
		ADD R3, R3, #-1	; ONE LEFT, THE SPACE THAT MIGHT HAVE A CHIP
		ADD R3, R3, #12	; ONE DOWN, DIAGONAL SPACE, YAAAY
		LDR R5, R3, #0	; CONTENTS IN DA SPACE
		ADD R5, R5, R0	; CHIP? YA THERE PAL?
		BRNP DLFTUP1	; NOT SAME, CHECK SAME SIDE OTHER ANGLE
DLFTDWN2	ADD R3, R3, #-1	; ONE LEFT, EMPTY SPAAACE
		LDR R5, R3, #0	; CONTENTS IN DAT SPACE
		ADD R5, R5, R4	; SUBTRACTS STUFF WITH LF
		BRZ DLFTUP1	; END OF ROW, CHECK OTHER SIDE
		ADD R3, R3, #-1	; ONE LEFT, SPACE WITH CHIP MAYBE
		ADD R3, R3, #12	; ONE DOWN DIAGONAL SPACE!
		LDR R5, R3, #0	; STUFF IN SPACE
		ADD R5, R5, R0	; HEY CHIP... HELLO?
		BRNP DLFTUP1	; NOT SAME ;-; GO THE OTHER WAY
DLFTDWN3	ADD R3, R3, #-1	; ONE LEFT, EMPTY SPACE
		LDR R5, R3, #0	; CONTENTS IN SPACE
		ADD R5, R5, R4	; CONTENTS MINUS LF
		BRZ DLFTUP1	; END OF ROW, OTHER SIDE BUB
		ADD R3, R3, #-1	; ONE LEFT, THE PLAYABLE SPACE
		ADD R3, R3, #12	; ONE DOWN, DIAGONAL SPACE
		LDR R5, R3, #0	; CONTENTS IN DIAGONAL SPACE
		ADD R5, R5, R0	; IS CHIP IN SPACE?
		BRNP DLFTUP1	; NOT SAME GO OTHER WAY
		BRZ WINNER2

DLFTUP1		ADD R3, R2, #0		; RESET R3 WITH CHIP DATA
		JSR GET_UPBD
		;LD R1, UPBD		; BORDER OF TOP OF BOARD
		ADD R3, R3, #-2		; NEXT PLAYABLE SPACE, ALREADY CHECKED FO' LF
		ADD R3, R3, #-12	;ONE UP, DIAGONAL SPACE FROM CHIP
		LDR R5, R3, #0		; CONTENTS FROM SPACE
		ADD R5, R5, R0		; CHIP?
		BRNP DRAW_MAYBE2	; NOT SAME END TURN
DLFTUP2		ADD R3, R3, #-1		; EMPTY SPACE NEXT TO SPACE
		LDR R5, R3, #0		; CONTENTS IN SPACE
		ADD R5, R5, R4		; CONTENTS MINUS LF
		BRZ DRAW_MAYBE2		; END OF ROW, NO MORE CHECKS
		ADD R3, R3, #-1		; ONE LEFT, PLAYABLE SPACE
		ADD R3, R3, #-12	; ONE UP, DIAGONAL SPOT
		LDR R5, R3, #0		; CONTENTS IN DIAGONAL SPACE
		ADD R5, R5, R0		; CHIP?
		BRNP DRAW_MAYBE2	; NOT SAME, END TURN
DLFTUP3		ADD R3, R3, #-1		; EMPTY SPACE NECT TO SPACE
		LDR R5, R3, #0		; CONTENTS IN SPACE
		ADD R5, R5, R4		; CONTENTS MINUS LF
		BRZ DRAW_MAYBE2		; END OF ROW, NO MO' CHECKS HOMIE
		ADD R3, R3, #-1		; LEFT ONE, NEXT COLUMN
		ADD R3, R3, #-12	; ONE UP, DIAGONAL SPACE YO
		LDR R5, R3, #0		; CONTENTS IN DIAGONAL SPACE
		ADD R5, R5, R0		; CHIP?
		BRNP DRAW_MAYBE2	; NOT SAME, NO CHECKS LEFT
		BRZ WINNER2

;;;THE ACTUAL BEGINNING!
BOARD_START JSR SETUP
;;;PROMPT
TURNEND2 LD R0, BRD		; RESET R0 TO FIRST MEM LOC OF BOARD
	PUTS			; DISPLAY BOARD
	LEA R0, TURN1		; LOAD PROMPT TO R0
	PUTS			; DISPLAY PROMPT FO' PL1
;;;GET MOVE
INPUT	GETC			; COLUMN INPUT
	OUT			; DISPLAY WHAT WAS INPUTTED
	ADD R4, R0, #0		; COPY INPUT TO R4
	LD R0, LF		; LOAD <ENTER> TO R0
	OUT			; DISPLAY ENTER
	ADD R0, R4, #0		; BRING INPUT BACK TO R0
	LD R2, NEGHEX6		; X-36 IN R2
	LD R3, NEGHEX1		; X-31 IN R3
;;;CHECKS IF MOVE IS VALID
	ADD R1, R0, R2		; INPUT MINUS #6
	BRNZ CHK2		; IS INPUT LESS THAN OR EQUAL TO 6?
	BRP INVALID		; IS INPUT MORE THAN 6?
CHK2	ADD R1, R0, R3		; INPUT MINUS #1
	BRN INVALID		; IS INPUT LESS THAN 1?

VALID	AND R3, R3, #0
	ADD R3, R3, #5		; COUNTER FOR COLUMNS
	LD R2, COLUMN		; MEM LOC OF BOTTOM OF COLUMN 1
	LD R1, INPUTC		; DIFFERENCE B/N INPUT AND COLUMN
	ADD R0, R0, R1		; ASCII INPUT TO COLUMN INPUT
	ADD R1, R0, #0		; COPY INPUT TO R1
VALUE	ADD R1, R1, #-1		; INPUT MINUS 1
	BRZ INSERT		; IS INPUT REFERRING TO R2 COLUMN?
	ADD R2, R2, #2		; NEXT COLUMN
	ADD R3, R3, #-1		; ONE LESS COLUMN AVAILABLE
	BRN INVALID		; SHOULD HAVE ALREADY CHECKED BUT HEY, JUST IN CASE
	BRZP VALUE		; CHECKS INCREMENTED INPUT
;;;IF INVALID...
INVALID LEA R0, INVD		; LOAD ERROR PROMPT TO R0
	PUTS			; DISPLAY ERROR PROMPT
	BRNZP INPUT		; TRY AGAIN FOO'
;;;CHECK IF SPACE IS VALID
INSERT	LD R1, NEGDASH		; NEGATED ASCII OF - IN R1 (X-2D)
	AND R3, R3, #0
	ADD R3, R3, #5		; COUNTER FOR ROWS
COLNEXT	LDR R4, R2, #0		; VALUE IN R2 IN R4
	ADD R0, R4, R1		; VALUE IN R2 MINUS -
	BRZ CHIP1		; IS COLUMN SPACE EMPTY?
	ADD R2, R2, #-12	; GO TO SPACE ABOVE PREVIOUS ONE
	ADD R3, R3, #-1		; ONE LESS ROW
	BRN INVALID		; ALL ROWS FULL
	BRZP COLNEXT
;;;DROP CHIP IN SPACE
CHIP1	LD R0, PL1		; PLAYER 1 CHIP IN R0
	STR R0, R2, #0		; DROP CHIP IN MEM LOC OF R2
	ADD R6, R6, #-1		; ONE LESS SPACE OPEN
	JSR HOR1		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GO TO HORIZ AT TOP?
;;;CHECK WINS WILL BE AT TOP
WINNER1	LD R0, BRD		; RESET R0 TO FIRST MEM LOC OF BOARD
	PUTS			; DISPLAY BOARD
	LEA R0, WIN1		; WINNING PROMPT FO' PL1
	PUTS			; PRINTS WINNER PROMPT
	BRNZP STAHP		; END GAME
;;;CHECKS FAIL, NO WINNER
DRAW_MAYBE	ADD R6, R6, #0	; SET UP SPACE COUNTER FOR BRANCH
		BRNP TURNEND1	; STILL SPACES LEFT? NEXT TURN!
		LD R0, BRD	; NO SPACES? AND NO WINNER?
		PUTS		; DISPLAY BOARD
		LEA R0, TIE	; GET MESSAGE READY
		PUTS		; IT'S A TIE BROSKI
		BRNZP STAHP	; END GAME
;;;TURNEND1 WHICH IS JUST TURN2START
;;;PROMPT
TURNEND1 LD R0, BRD		; RESET R0 TO FIRST MEM LOC OF BOARD
	PUTS			; DISPLAY BOARD
	LEA R0, TURN2		; LOAD PROMPT TO R0
	PUTS			; DISPLAY PROMPT FO' PL2
;;;GET MOVE
INPUT2	GETC			; COLUMN INPUT
	OUT			; DISPLAY WHAT WAS INPUTTED
	ADD R4, R0, #0		; COPY INPUT TO R4
	LD R0, LF		; LOAD <ENTER> TO R0
	OUT			; DISPLAY ENTER
	ADD R0, R4, #0		; BRING INPUT BACK TO R0
	LD R2, NEGHEX6		; X-36 IN R2
	LD R3, NEGHEX1		; X-31 IN R3
;;;CHECKS IF MOVE IS VALID
	ADD R1, R0, R2		; INPUT MINUS #6
	BRNZ CHK3		; IS INPUT LESS THAN OR EQUAL TO 6?
	BRP INVALID2		; IS INPUT MORE THAN 6?
CHK3	ADD R1, R0, R3		; INPUT MINUS #1
	BRN INVALID2		; IS INPUT LESS THAN 1?

VALID2	AND R3, R3, #0
	ADD R3, R3, #5		; COUNTER FOR COLUMNS
	LD R2, COLUMN		; MEM LOC OF BOTTOM OF COLUMN 1
	LD R1, INPUTC		; DIFFERENCE B/N INPUT AND COLUMN
	ADD R0, R0, R1		; ASCII INPUT TO COLUMN INPUT
	ADD R1, R0, #0		; COPY INPUT TO R1
VALUE2	ADD R1, R1, #-1		; INPUT MINUS 1
	BRZ INSERT2		; IS INPUT REFERRING TO R2 COLUMN?
	ADD R2, R2, #2		; NEXT COLUMN
	ADD R3, R3, #-1		; ONE LESS COLUMN AVAILABLE
	BRN INVALID2		; SHOULD HAVE ALREADY CHECKED BUT HEY, JUST IN CASE
	BRZP VALUE2		; CHECKS INCREMENTED INPUT
;;;IF INVALID...
INVALID2 LEA R0, INVD		; LOAD ERROR PROMPT TO R0
	PUTS			; DISPLAY ERROR PROMPT
	BRNZP INPUT2		; TRY AGAIN FOO'
;;;CHECKS IF SPACE IS VALID
INSERT2	LD R1, NEGDASH		; NEGATED ASCII OF - IN R1 (X-2D)
	AND R3, R3, #0
	ADD R3, R3, #5		; COUNTER FOR ROWS
COLNEXT2 LDR R4, R2, #0		; VALUE IN R2 IN R4
	ADD R0, R4, R1		; VALUE IN R2 MINUS -
	BRZ CHIP2		; IS COLUMN SPACE EMPTY?
	ADD R2, R2, #-12	;;; GO TO SPACE ABOVE PREVIOUS ONE
	ADD R3, R3, #-1		; ONE LESS ROW
	BRN INVALID2		; ALL ROWS FULL
	BRZP COLNEXT2
;;;DROP DAT CHIP IN!
CHIP2	LD R0, PL2		; PLAYER 1 CHIP IN R0
	STR R0, R2, #0		; DROP CHIP IN MEM LOC OF R2
	ADD R6, R6, #-1		; ONE LESS SPACE OPEN
	JSR HOR2		;;;;;;;;;;;;;;;;GO TO HORIZ2 BUT NEED MEM LOC
;;;CHECK WINS WILL ALSO BE AT THE TOP... AND LOOK MESSY
WINNER2	LD R0, BRD		; RESET R0 TO FIRST MEM LOC OF BOARD
	PUTS			; DISPLAY BOARD
	LEA R0, WIN2		; WINNING PROMPT FO' PL2
	PUTS			; PRINTS WINNER PROMPT
	BRNZP STAHP		; END GAME
;;;CHECKS FAIL, NO WINNER
DRAW_MAYBE2	ADD R6, R6, #0	; SET UP SPACE COUNTER FOR BRANCH
		BRNP TURNEND2	; STILL SPACES LEFT? NEXT TURN!
		LD R0, BRD	; NO SPACES? AND NO WINNER?
		PUTS		; DISPLAY BOARD
		LEA R0, TIE	; GET MESSAGE READY
		PUTS		; IT'S A TIE BROSKI
		BRNZP STAHP	; END GAME
;;;TURNEND2 WHICH IS JUST TURN2START!

STAHP HALT

BRD 	.FILL X5000		; BEGINNING OF BOARD STRING
COLUMN	.FILL X503C		; BOTTOM OF COLUMN 1
DASH 	.FILL X2D		; ASCII -
NEGDASH .FILL X-2D		; NEGATED ASCII -
SPACE 	.FILL X20		; ASCII "SPACE"
HORR7	.FILL X3001		; LOC OF HORIZONTAL CHECK
HOR2R7	.FILL X30DF
LF 	.FILL XA		; ASCII <ENTER>
NEGLF	.FILL X-A		; NEGATED ASCII <ENTER>
PL1 	.FILL X4F		; PL1 CHIP 'O'
PL2 	.FILL X58		; PL2 CHIP 'X'
TURN1 	.STRINGZ "Player 1, choose a column: "		; PL1 START TURN
TURN2 	.STRINGZ "Player 2, choose a column: "		; PL2 START TURN
WIN1 	.STRINGZ "Player 1 Wins."			; PL1 WINS!
WIN2 	.STRINGZ "Player 2 Wins."			; PL2 WINS!
INVD 	.STRINGZ "Invalid move. Try again: "		; INVALID MOVE, WHAT THE HECK MAN
TIE 	.STRINGZ "Tie Game."				; IT'S A TIE
NEGHEX6 .FILL X-36		; NEGATED ASCII 6
NEGHEX1 .FILL X-31		; NEGATED ASCII 1
INPUTC  .FILL X-30		; DIFFERENCE BETWEEN INPUT AND COLUMN SELECTED
UPBD	.FILL X-5000		; BORDER OF TOP OF BOARD
DIS	.FILL X31BC		; LOC OF BRD STRT
W1N	.FILL X31EB		; LOC OF WINNER1
DRAW	.FILL X31F0		; LOC OF DRAW_MAYBE IN MAIN PROGRAM
W2N	.FILL X3225		; LOC OF WINNER2
LWBD	.FILL X-5046		; BORDER OF BOTTOM OF BOARD

SETUP 	
LD R0, BRD			; BEGINNING OF BOARD ARRAY
LD R1, DASH			; ASCII VALUE OF -
LD R2, SPACE			; ASCII VALUE OF "SPACE"
LD R3, LF			; ASCII VALUE OF <ENTER>
AND R4, R4, #0			; # OF -'S PER ROW
ADD R4, R4, #6
AND R5, R5, #0			; # OF ROWS (LINE FILLS)
ADD R5, R5, #6
ROW 	STR R1, R0, #0		; STORE -
ADD R0, R0, #1		; NEXT MEM LOC
ADD R4, R4, #-1		; ONE LESS - IN ROW LEFT
BRZ NEXT		; CHECKS # OF DASHES LEFT
STR R2, R0, #0		; STORES SPACE AFTER EACH -
ADD R0, R0, #1		; NEXT MEM LOC
BRNZP ROW		; INSERT ANOTHER -
NEXT	STR R3, R0, #0		; END OF ROW, INSERT LINE FILL
ADD R0, R0, #1		; NEXT MEM LOC
ADD R4, R4, #6		; RESET # OF -'S FOR NEXT ROW	
ADD R5, R5, #-1		; ONE LESS ROW LEFT IN BOARD
BRNP ROW		; ANY MORE ROWS?
AND R6, R6, #0			; NULL TERMINATE IN R6
STR R6, R0, #0			; END BOARD STRING
ADD R6, R6, #9			; SPACE COUNTER
ADD R6, R6, #9
ADD R6, R6, #9
ADD R6, R6, #9
RET

GET_UPBD
LD R1, UPBD
RET

GET_LWBD
LD R1, LWBD
RET

HOR1
LD R7, HORR7
RET

HOR2
LD R7, HOR2R7
RET

BOARD_PTR
LD R7, DIS
RET

GET_WIN1
LD R7, W1N
RET

GET_DM
LD R7, DRAW
RET

GET_WIN2
LD R7, W2N
RET
.END